@using StudioScheduler.Shared.Dtos
@inject HttpClient Http

<MudContainer>
    @if (Schedule != null)
    {
        <MudForm @ref="form" @bind-IsValid="@isValid">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" Class="mb-4">
                        @(Mode == "create" ? "Create New Class" : "Edit Class")
                    </MudText>
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="Schedule.Name" 
                                 Label="Class Name" 
                                 Required="true"
                                 RequiredError="Class name is required" />
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="Schedule.Level" 
                                 Label="Level" 
                                 Required="true" />
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="Schedule.DayOfWeek" 
                              Label="Day of Week" 
                              Required="true">
                        <MudSelectItem Value="DayOfWeek.Monday">Monday</MudSelectItem>
                        <MudSelectItem Value="DayOfWeek.Tuesday">Tuesday</MudSelectItem>
                        <MudSelectItem Value="DayOfWeek.Wednesday">Wednesday</MudSelectItem>
                        <MudSelectItem Value="DayOfWeek.Thursday">Thursday</MudSelectItem>
                        <MudSelectItem Value="DayOfWeek.Friday">Friday</MudSelectItem>
                        <MudSelectItem Value="DayOfWeek.Saturday">Saturday</MudSelectItem>
                        <MudSelectItem Value="DayOfWeek.Sunday">Sunday</MudSelectItem>
                    </MudSelect>
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudTimePicker @bind-Time="startTimeNullable" 
                                  Label="Start Time" />
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="Schedule.Duration" 
                                    Label="Duration (minutes)" 
                                    Required="true"
                                    Min="30" Max="200" Step="15" />
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="Schedule.Capacity" 
                                    Label="Capacity" 
                                    Required="true"
                                    Min="1" Max="50" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudCheckBox T="bool" @bind-Value="Schedule.IsRecurring" 
                                Label="Recurring Class" />
                </MudItem>
                
                @if (Schedule.IsRecurring)
                {
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.body2" Class="mt-4">
                            Recurrence: Weekly (every week on the same day)
                        </MudText>
                    </MudItem>
                }
                
                <MudItem xs="12" sm="6">
                    <MudDatePicker Date="@effectiveFromDate" DateChanged="@(date => OnEffectiveFromDateChanged(date ?? DateTime.Today))" 
                                  Label="Effective From" 
                                  Required="true" />
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudDatePicker Date="@Schedule.EffectiveTo" DateChanged="@(date => OnEffectiveToDateChanged(date))" 
                                  Label="Effective To (Optional)" />
                </MudItem>
                
                @if (Mode == "edit")
                {
                    <MudItem xs="12" sm="6">
                        <MudCheckBox T="bool" @bind-Value="Schedule.IsActive" 
                                    Label="Active" />
                    </MudItem>
                    
                    <MudItem xs="12" sm="6">
                        <MudCheckBox T="bool" @bind-Value="Schedule.IsCancelled" 
                                    Label="Cancelled" />
                    </MudItem>
                }
            </MudGrid>
        </MudForm>
    }
</MudContainer>

@code {
    [Parameter] public ScheduleEditDto? Schedule { get; set; }
    [Parameter] public string Mode { get; set; } = "edit";
    [Parameter] public EventCallback<ScheduleEditDto> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private MudForm? form;
    private bool isValid;
    private DateTime effectiveFromDate = DateTime.Today;
    
    private TimeSpan? startTimeNullable
    {
        get => Schedule?.StartTime;
        set
        {
            if (Schedule != null && value.HasValue)
            {
                Schedule.StartTime = value.Value;
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (Schedule != null)
        {
            effectiveFromDate = Schedule.EffectiveFrom;
        }
    }

    private async Task HandleSave()
    {
        if (Schedule != null)
        {
            Schedule.EffectiveFrom = effectiveFromDate;
            await OnSave.InvokeAsync(Schedule);
        }
    }

    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
    }

    private void OnEffectiveFromDateChanged(DateTime date)
    {
        effectiveFromDate = date;
    }

    private void OnEffectiveToDateChanged(DateTime? date)
    {
        if (Schedule != null)
        {
            Schedule.EffectiveTo = date;
        }
    }
}
