@using StudioScheduler.Shared.Dtos
@inject HttpClient Http

<MudContainer>
    @if (Schedule != null)
    {
        <MudForm @ref="form" @bind-IsValid="@isValid">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h5" Class="mb-4">
                        @(Mode == "create" ? "Create New Class" : "Edit Class")
                    </MudText>
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="Schedule.Name" 
                                 Label="Class Name" 
                                 Required="true"
                                 RequiredError="Class name is required" />
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudSelect @bind-Value="Schedule.Level" Label="Level" Required="true">
                        <MudSelectItem Value="@("P1")">Level P1</MudSelectItem>
                        <MudSelectItem Value="@("P2")">Level P2</MudSelectItem>
                        <MudSelectItem Value="@("P3")">Level P3</MudSelectItem>
                        <MudSelectItem Value="@("S1")">Level S1</MudSelectItem>
                        <MudSelectItem Value="@("S2")">Level S2</MudSelectItem>
                        <MudSelectItem Value="@("S3")">Level S3</MudSelectItem>
                        <MudSelectItem Value="@("OPEN")">OPEN level</MudSelectItem>
                    </MudSelect>
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudDatePicker Date="@startDateOnly" DateChanged="@(date => OnStartDateChanged(date ?? DateTime.Today))" 
                                  Label="Start Date" 
                                  Required="true" />
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudTimePicker Time="@startTimeOnly" TimeChanged="@(time => OnStartTimeChanged(time ?? TimeSpan.Zero))" 
                                  Label="Start Time" 
                                  Required="true" />
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="durationHours" 
                                    Label="Duration (hours)" 
                                    Required="true"
                                    Min="0.5" Max="4" Step="0.5" />
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="Schedule.Capacity" 
                                    Label="Capacity" 
                                    Required="true"
                                    Min="1" Max="50" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudCheckBox T="bool" @bind-Value="Schedule.IsRecurring" 
                                Label="Recurring Class" />
                </MudItem>
                
                @if (Schedule.IsRecurring)
                {
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="Schedule.RecurrencePattern" 
                                     Label="Recurrence Pattern (e.g., 'Weekly')" />
                    </MudItem>
                    
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Date="@Schedule.RecurrenceEndDate" DateChanged="@(date => OnRecurrenceEndDateChanged(date))" 
                                      Label="Recurrence End Date" />
                    </MudItem>
                }
                
                <MudItem xs="12" sm="6">
                    <MudDatePicker Date="@effectiveFromDate" DateChanged="@(date => OnEffectiveFromDateChanged(date ?? DateTime.Today))" 
                                  Label="Effective From" 
                                  Required="true" />
                </MudItem>
                
                <MudItem xs="12" sm="6">
                    <MudDatePicker Date="@Schedule.EffectiveTo" DateChanged="@(date => OnEffectiveToDateChanged(date))" 
                                  Label="Effective To (Optional)" />
                </MudItem>
                
                @if (Mode == "edit")
                {
                    <MudItem xs="12" sm="6">
                        <MudCheckBox T="bool" @bind-Value="Schedule.IsActive" 
                                    Label="Active" />
                    </MudItem>
                    
                    <MudItem xs="12" sm="6">
                        <MudCheckBox T="bool" @bind-Value="Schedule.IsCancelled" 
                                    Label="Cancelled" />
                    </MudItem>
                }
            </MudGrid>
        </MudForm>
    }
</MudContainer>

@code {
    [Parameter] public ScheduleEditDto? Schedule { get; set; }
    [Parameter] public string Mode { get; set; } = "edit";
    [Parameter] public EventCallback<ScheduleEditDto> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private MudForm? form;
    private bool isValid;
    private double durationHours = 1.0;
    private TimeSpan startTimeOnly = TimeSpan.Zero;
    private DateTime startDateOnly = DateTime.Today;
    private DateTime effectiveFromDate = DateTime.Today;

    protected override void OnParametersSet()
    {
        if (Schedule != null)
        {
            durationHours = Schedule.Duration.TotalHours;
            startTimeOnly = Schedule.StartTime.TimeOfDay;
            startDateOnly = Schedule.StartTime.Date;
            effectiveFromDate = Schedule.EffectiveFrom;
        }
    }

    private async Task HandleSave()
    {
        if (Schedule != null)
        {
            // Update the start time with the date and time components
            Schedule.StartTime = startDateOnly.Add(startTimeOnly);
            Schedule.EffectiveFrom = effectiveFromDate;
            Schedule.Duration = TimeSpan.FromHours(durationHours);
            await OnSave.InvokeAsync(Schedule);
        }
    }

    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
    }

    private void OnStartDateChanged(DateTime date)
    {
        startDateOnly = date;
    }

    private void OnStartTimeChanged(TimeSpan time)
    {
        startTimeOnly = time;
    }

    private void OnRecurrenceEndDateChanged(DateTime? date)
    {
        if (Schedule != null)
        {
            Schedule.RecurrenceEndDate = date;
        }
    }

    private void OnEffectiveFromDateChanged(DateTime date)
    {
        effectiveFromDate = date;
    }

    private void OnEffectiveToDateChanged(DateTime? date)
    {
        if (Schedule != null)
        {
            Schedule.EffectiveTo = date;
        }
    }
}
