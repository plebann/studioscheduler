@page "/students"
@using MudBlazor
@using StudioScheduler.Client.Services
@using StudioScheduler.Shared.Dtos
@inject IStudentService StudentService

<PageTitle>Students - Studio Scheduler</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Students Management</MudText>
    
    <MudCard Class="mt-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Student Directory</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="@Icons.Material.Filled.Add">
                    Add New Student
                </MudButton>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudTextField @bind-Value="searchText" 
                                 Label="Search Students" 
                                 Variant="Variant.Outlined"
                                 Adornment="Adornment.Start" 
                                 AdornmentIcon="@Icons.Material.Filled.Search" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudSelect @bind-Value="statusFilter" 
                              Label="Filter by Status" 
                              Variant="Variant.Outlined">
                        <MudSelectItem Value="@("")">All Students</MudSelectItem>
                        <MudSelectItem Value="@("active")">Active Only</MudSelectItem>
                        <MudSelectItem Value="@("inactive")">Inactive Only</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
            
            <MudDivider Class="my-4" />
            
            @if (isLoading)
            {
                <MudProgressCircular Indeterminate="true" />
                <MudText>Loading students...</MudText>
            }
            else
            {
                <MudDataGrid Items="@filteredStudents" 
                            Filterable="true" 
                            SortMode="@SortMode.Multiple" 
                            Groupable="false">
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Name" />
                        <PropertyColumn Property="x => x.Email" Title="Email" />
                        <PropertyColumn Property="x => x.Phone" Title="Phone" />
                        <PropertyColumn Property="x => x.JoinDate" Title="Join Date" Format="dd/MM/yyyy" />
                        <TemplateColumn Title="Status">
                            <CellTemplate>
                                <MudChip Color="@(context.Item.IsActive ? Color.Success : Color.Default)" 
                                         Size="Size.Small">
                                    @(context.Item.IsActive ? "Active" : "Inactive")
                                </MudChip>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Actions">
                            <CellTemplate>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                              Size="Size.Small" 
                                              Color="Color.Primary" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                              Size="Size.Small" 
                                              Color="Color.Error" />
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string searchText = "";
    private string statusFilter = "";
    private bool isLoading = true;
    
    private List<StudentDto> students = new();
    
    private IEnumerable<StudentDto> filteredStudents => 
        students.Where(s => 
            (string.IsNullOrEmpty(searchText) || 
             s.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             s.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(statusFilter) ||
             (statusFilter == "active" && s.IsActive) ||
             (statusFilter == "inactive" && !s.IsActive))
        );

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
    }

    private async Task LoadStudents()
    {
        try
        {
            isLoading = true;
            students = await StudentService.GetAllStudentsAsync();
        }
        catch (Exception ex)
        {
            // In a real app, you'd want to show a proper error message to the user
            Console.WriteLine($"Error loading students: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
